/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ca.vanzyl.harbor.client.okhttp.api;

import ca.vanzyl.harbor.client.okhttp.invoker.ApiCallback;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiClient;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiException;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiResponse;
import ca.vanzyl.harbor.client.okhttp.invoker.Configuration;
import ca.vanzyl.harbor.client.okhttp.invoker.Pair;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressRequestBody;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ca.vanzyl.harbor.client.okhttp.model.Errors;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScanApi {
    private ApiClient apiClient;

    public ScanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScanApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getReportLog
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param reportId The report id to get the log (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportLogCall(String projectName, String repositoryName, String reference, String reportId, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()))
            .replaceAll("\\{" + "report_id" + "\\}", apiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportLogValidateBeforeCall(String projectName, String repositoryName, String reference, String reportId, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getReportLog(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling getReportLog(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling getReportLog(Async)");
        }
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getReportLog(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportLogCall(projectName, repositoryName, reference, reportId, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the log of the scan report
     * Get the log of the scan report
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param reportId The report id to get the log (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getReportLog(String projectName, String repositoryName, String reference, String reportId, String xRequestId) throws ApiException {
        ApiResponse<String> resp = getReportLogWithHttpInfo(projectName, repositoryName, reference, reportId, xRequestId);
        return resp.getData();
    }

    /**
     * Get the log of the scan report
     * Get the log of the scan report
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param reportId The report id to get the log (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getReportLogWithHttpInfo(String projectName, String repositoryName, String reference, String reportId, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = getReportLogValidateBeforeCall(projectName, repositoryName, reference, reportId, xRequestId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the log of the scan report (asynchronously)
     * Get the log of the scan report
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param reportId The report id to get the log (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportLogAsync(String projectName, String repositoryName, String reference, String reportId, String xRequestId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportLogValidateBeforeCall(projectName, repositoryName, reference, reportId, xRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scanArtifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scanArtifactCall(String projectName, String repositoryName, String reference, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scanArtifactValidateBeforeCall(String projectName, String repositoryName, String reference, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling scanArtifact(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling scanArtifact(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling scanArtifact(Async)");
        }
        

        com.squareup.okhttp.Call call = scanArtifactCall(projectName, repositoryName, reference, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scan the artifact
     * Scan the specified artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void scanArtifact(String projectName, String repositoryName, String reference, String xRequestId) throws ApiException {
        scanArtifactWithHttpInfo(projectName, repositoryName, reference, xRequestId);
    }

    /**
     * Scan the artifact
     * Scan the specified artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> scanArtifactWithHttpInfo(String projectName, String repositoryName, String reference, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = scanArtifactValidateBeforeCall(projectName, repositoryName, reference, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Scan the artifact (asynchronously)
     * Scan the specified artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scanArtifactAsync(String projectName, String repositoryName, String reference, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scanArtifactValidateBeforeCall(projectName, repositoryName, reference, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
