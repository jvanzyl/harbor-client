/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ca.vanzyl.harbor.client.okhttp.api;

import ca.vanzyl.harbor.client.okhttp.invoker.ApiCallback;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiClient;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiException;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiResponse;
import ca.vanzyl.harbor.client.okhttp.invoker.Configuration;
import ca.vanzyl.harbor.client.okhttp.invoker.Pair;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressRequestBody;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ca.vanzyl.harbor.client.okhttp.model.Artifact;
import ca.vanzyl.harbor.client.okhttp.model.Errors;
import ca.vanzyl.harbor.client.okhttp.model.Label;
import ca.vanzyl.harbor.client.okhttp.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArtifactApi {
    private ApiClient apiClient;

    public ArtifactApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArtifactApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addLabel
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param label The label that added to the artifact. Only the ID property is needed. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLabelCall(String projectName, String repositoryName, String reference, Label label, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = label;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLabelValidateBeforeCall(String projectName, String repositoryName, String reference, Label label, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling addLabel(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling addLabel(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling addLabel(Async)");
        }
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling addLabel(Async)");
        }
        

        com.squareup.okhttp.Call call = addLabelCall(projectName, repositoryName, reference, label, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add label to artifact
     * Add label to the specified artiact.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param label The label that added to the artifact. Only the ID property is needed. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLabel(String projectName, String repositoryName, String reference, Label label, String xRequestId) throws ApiException {
        addLabelWithHttpInfo(projectName, repositoryName, reference, label, xRequestId);
    }

    /**
     * Add label to artifact
     * Add label to the specified artiact.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param label The label that added to the artifact. Only the ID property is needed. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLabelWithHttpInfo(String projectName, String repositoryName, String reference, Label label, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = addLabelValidateBeforeCall(projectName, repositoryName, reference, label, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add label to artifact (asynchronously)
     * Add label to the specified artiact.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param label The label that added to the artifact. Only the ID property is needed. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLabelAsync(String projectName, String repositoryName, String reference, Label label, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLabelValidateBeforeCall(projectName, repositoryName, reference, label, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for copyArtifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param from The artifact from which the new artifact is copied from, the format should be \&quot;project/repository:tag\&quot; or \&quot;project/repository@digest\&quot;. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyArtifactCall(String projectName, String repositoryName, String from, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyArtifactValidateBeforeCall(String projectName, String repositoryName, String from, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling copyArtifact(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling copyArtifact(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling copyArtifact(Async)");
        }
        

        com.squareup.okhttp.Call call = copyArtifactCall(projectName, repositoryName, from, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Copy artifact
     * Copy the artifact specified in the \&quot;from\&quot; parameter to the repository.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param from The artifact from which the new artifact is copied from, the format should be \&quot;project/repository:tag\&quot; or \&quot;project/repository@digest\&quot;. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void copyArtifact(String projectName, String repositoryName, String from, String xRequestId) throws ApiException {
        copyArtifactWithHttpInfo(projectName, repositoryName, from, xRequestId);
    }

    /**
     * Copy artifact
     * Copy the artifact specified in the \&quot;from\&quot; parameter to the repository.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param from The artifact from which the new artifact is copied from, the format should be \&quot;project/repository:tag\&quot; or \&quot;project/repository@digest\&quot;. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> copyArtifactWithHttpInfo(String projectName, String repositoryName, String from, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = copyArtifactValidateBeforeCall(projectName, repositoryName, from, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy artifact (asynchronously)
     * Copy the artifact specified in the \&quot;from\&quot; parameter to the repository.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param from The artifact from which the new artifact is copied from, the format should be \&quot;project/repository:tag\&quot; or \&quot;project/repository@digest\&quot;. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyArtifactAsync(String projectName, String repositoryName, String from, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyArtifactValidateBeforeCall(projectName, repositoryName, from, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createTag
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param tag The JSON object of tag. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTagCall(String projectName, String repositoryName, String reference, Tag tag, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tag;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTagValidateBeforeCall(String projectName, String repositoryName, String reference, Tag tag, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling createTag(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling createTag(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling createTag(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling createTag(Async)");
        }
        

        com.squareup.okhttp.Call call = createTagCall(projectName, repositoryName, reference, tag, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create tag
     * Create a tag for the specified artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param tag The JSON object of tag. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createTag(String projectName, String repositoryName, String reference, Tag tag, String xRequestId) throws ApiException {
        createTagWithHttpInfo(projectName, repositoryName, reference, tag, xRequestId);
    }

    /**
     * Create tag
     * Create a tag for the specified artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param tag The JSON object of tag. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createTagWithHttpInfo(String projectName, String repositoryName, String reference, Tag tag, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = createTagValidateBeforeCall(projectName, repositoryName, reference, tag, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create tag (asynchronously)
     * Create a tag for the specified artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param tag The JSON object of tag. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTagAsync(String projectName, String repositoryName, String reference, Tag tag, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTagValidateBeforeCall(projectName, repositoryName, reference, tag, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteArtifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteArtifactCall(String projectName, String repositoryName, String reference, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteArtifactValidateBeforeCall(String projectName, String repositoryName, String reference, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling deleteArtifact(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling deleteArtifact(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling deleteArtifact(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteArtifactCall(projectName, repositoryName, reference, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the specific artifact
     * Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteArtifact(String projectName, String repositoryName, String reference, String xRequestId) throws ApiException {
        deleteArtifactWithHttpInfo(projectName, repositoryName, reference, xRequestId);
    }

    /**
     * Delete the specific artifact
     * Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteArtifactWithHttpInfo(String projectName, String repositoryName, String reference, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = deleteArtifactValidateBeforeCall(projectName, repositoryName, reference, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the specific artifact (asynchronously)
     * Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteArtifactAsync(String projectName, String repositoryName, String reference, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteArtifactValidateBeforeCall(projectName, repositoryName, reference, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTag
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param tagName The name of the tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTagCall(String projectName, String repositoryName, String reference, String tagName, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()))
            .replaceAll("\\{" + "tag_name" + "\\}", apiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTagValidateBeforeCall(String projectName, String repositoryName, String reference, String tagName, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling deleteTag(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling deleteTag(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling deleteTag(Async)");
        }
        
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling deleteTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTagCall(projectName, repositoryName, reference, tagName, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete tag
     * Delete the tag of the specified artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param tagName The name of the tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTag(String projectName, String repositoryName, String reference, String tagName, String xRequestId) throws ApiException {
        deleteTagWithHttpInfo(projectName, repositoryName, reference, tagName, xRequestId);
    }

    /**
     * Delete tag
     * Delete the tag of the specified artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param tagName The name of the tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTagWithHttpInfo(String projectName, String repositoryName, String reference, String tagName, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTagValidateBeforeCall(projectName, repositoryName, reference, tagName, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete tag (asynchronously)
     * Delete the tag of the specified artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param tagName The name of the tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTagAsync(String projectName, String repositoryName, String reference, String tagName, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTagValidateBeforeCall(projectName, repositoryName, reference, tagName, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAddition
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param addition The type of addition. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdditionCall(String projectName, String repositoryName, String reference, String addition, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()))
            .replaceAll("\\{" + "addition" + "\\}", apiClient.escapeString(addition.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdditionValidateBeforeCall(String projectName, String repositoryName, String reference, String addition, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getAddition(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling getAddition(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling getAddition(Async)");
        }
        
        // verify the required parameter 'addition' is set
        if (addition == null) {
            throw new ApiException("Missing the required parameter 'addition' when calling getAddition(Async)");
        }
        

        com.squareup.okhttp.Call call = getAdditionCall(projectName, repositoryName, reference, addition, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the addition of the specific artifact
     * Get the addition of the artifact specified by the reference under the project and repository.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param addition The type of addition. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getAddition(String projectName, String repositoryName, String reference, String addition, String xRequestId) throws ApiException {
        ApiResponse<String> resp = getAdditionWithHttpInfo(projectName, repositoryName, reference, addition, xRequestId);
        return resp.getData();
    }

    /**
     * Get the addition of the specific artifact
     * Get the addition of the artifact specified by the reference under the project and repository.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param addition The type of addition. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getAdditionWithHttpInfo(String projectName, String repositoryName, String reference, String addition, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = getAdditionValidateBeforeCall(projectName, repositoryName, reference, addition, xRequestId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the addition of the specific artifact (asynchronously)
     * Get the addition of the artifact specified by the reference under the project and repository.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param addition The type of addition. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdditionAsync(String projectName, String repositoryName, String reference, String addition, String xRequestId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdditionValidateBeforeCall(projectName, repositoryName, reference, addition, xRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getArtifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param withTag Specify whether the tags are inclued inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are inclued inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is inclued inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is inclued inside the returning artifacts (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getArtifactCall(String projectName, String repositoryName, String reference, String xRequestId, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (withTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_tag", withTag));
        if (withLabel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_label", withLabel));
        if (withScanOverview != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_scan_overview", withScanOverview));
        if (withSignature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_signature", withSignature));
        if (withImmutableStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_immutable_status", withImmutableStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xAcceptVulnerabilities != null)
        localVarHeaderParams.put("X-Accept-Vulnerabilities", apiClient.parameterToString(xAcceptVulnerabilities));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getArtifactValidateBeforeCall(String projectName, String repositoryName, String reference, String xRequestId, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getArtifact(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling getArtifact(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling getArtifact(Async)");
        }
        

        com.squareup.okhttp.Call call = getArtifactCall(projectName, repositoryName, reference, xRequestId, page, pageSize, xAcceptVulnerabilities, withTag, withLabel, withScanOverview, withSignature, withImmutableStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the specific artifact
     * Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param withTag Specify whether the tags are inclued inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are inclued inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is inclued inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is inclued inside the returning artifacts (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Artifact getArtifact(String projectName, String repositoryName, String reference, String xRequestId, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus) throws ApiException {
        ApiResponse<Artifact> resp = getArtifactWithHttpInfo(projectName, repositoryName, reference, xRequestId, page, pageSize, xAcceptVulnerabilities, withTag, withLabel, withScanOverview, withSignature, withImmutableStatus);
        return resp.getData();
    }

    /**
     * Get the specific artifact
     * Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param withTag Specify whether the tags are inclued inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are inclued inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is inclued inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is inclued inside the returning artifacts (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Artifact> getArtifactWithHttpInfo(String projectName, String repositoryName, String reference, String xRequestId, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus) throws ApiException {
        com.squareup.okhttp.Call call = getArtifactValidateBeforeCall(projectName, repositoryName, reference, xRequestId, page, pageSize, xAcceptVulnerabilities, withTag, withLabel, withScanOverview, withSignature, withImmutableStatus, null, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the specific artifact (asynchronously)
     * Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param withTag Specify whether the tags are inclued inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are inclued inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is inclued inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is inclued inside the returning artifacts (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getArtifactAsync(String projectName, String repositoryName, String reference, String xRequestId, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus, final ApiCallback<Artifact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getArtifactValidateBeforeCall(projectName, repositoryName, reference, xRequestId, page, pageSize, xAcceptVulnerabilities, withTag, withLabel, withScanOverview, withSignature, withImmutableStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVulnerabilitiesAddition
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVulnerabilitiesAdditionCall(String projectName, String repositoryName, String reference, String xRequestId, String xAcceptVulnerabilities, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xAcceptVulnerabilities != null)
        localVarHeaderParams.put("X-Accept-Vulnerabilities", apiClient.parameterToString(xAcceptVulnerabilities));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVulnerabilitiesAdditionValidateBeforeCall(String projectName, String repositoryName, String reference, String xRequestId, String xAcceptVulnerabilities, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getVulnerabilitiesAddition(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling getVulnerabilitiesAddition(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling getVulnerabilitiesAddition(Async)");
        }
        

        com.squareup.okhttp.Call call = getVulnerabilitiesAdditionCall(projectName, repositoryName, reference, xRequestId, xAcceptVulnerabilities, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the vulnerabilities addition of the specific artifact
     * Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getVulnerabilitiesAddition(String projectName, String repositoryName, String reference, String xRequestId, String xAcceptVulnerabilities) throws ApiException {
        ApiResponse<String> resp = getVulnerabilitiesAdditionWithHttpInfo(projectName, repositoryName, reference, xRequestId, xAcceptVulnerabilities);
        return resp.getData();
    }

    /**
     * Get the vulnerabilities addition of the specific artifact
     * Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getVulnerabilitiesAdditionWithHttpInfo(String projectName, String repositoryName, String reference, String xRequestId, String xAcceptVulnerabilities) throws ApiException {
        com.squareup.okhttp.Call call = getVulnerabilitiesAdditionValidateBeforeCall(projectName, repositoryName, reference, xRequestId, xAcceptVulnerabilities, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the vulnerabilities addition of the specific artifact (asynchronously)
     * Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVulnerabilitiesAdditionAsync(String projectName, String repositoryName, String reference, String xRequestId, String xAcceptVulnerabilities, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVulnerabilitiesAdditionValidateBeforeCall(projectName, repositoryName, reference, xRequestId, xAcceptVulnerabilities, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listArtifacts
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param withTag Specify whether the tags are included inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are included inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is included inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listArtifactsCall(String projectName, String repositoryName, String xRequestId, String q, String sort, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (withTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_tag", withTag));
        if (withLabel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_label", withLabel));
        if (withScanOverview != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_scan_overview", withScanOverview));
        if (withSignature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_signature", withSignature));
        if (withImmutableStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_immutable_status", withImmutableStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xAcceptVulnerabilities != null)
        localVarHeaderParams.put("X-Accept-Vulnerabilities", apiClient.parameterToString(xAcceptVulnerabilities));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listArtifactsValidateBeforeCall(String projectName, String repositoryName, String xRequestId, String q, String sort, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling listArtifacts(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling listArtifacts(Async)");
        }
        

        com.squareup.okhttp.Call call = listArtifactsCall(projectName, repositoryName, xRequestId, q, sort, page, pageSize, xAcceptVulnerabilities, withTag, withLabel, withScanOverview, withSignature, withImmutableStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List artifacts
     * List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \&quot;q\&quot; includes \&quot;tags&#x3D;*\&quot; to list only tagged artifacts, \&quot;tags&#x3D;nil\&quot; to list only untagged artifacts, \&quot;tags&#x3D;~v\&quot; to list artifacts whose tag fuzzy matches \&quot;v\&quot;, \&quot;tags&#x3D;v\&quot; to list artifact whose tag exactly matches \&quot;v\&quot;, \&quot;labels&#x3D;(id1, id2)\&quot; to list artifacts that both labels with id1 and id2 are added to
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param withTag Specify whether the tags are included inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are included inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is included inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return List&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Artifact> listArtifacts(String projectName, String repositoryName, String xRequestId, String q, String sort, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus) throws ApiException {
        ApiResponse<List<Artifact>> resp = listArtifactsWithHttpInfo(projectName, repositoryName, xRequestId, q, sort, page, pageSize, xAcceptVulnerabilities, withTag, withLabel, withScanOverview, withSignature, withImmutableStatus);
        return resp.getData();
    }

    /**
     * List artifacts
     * List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \&quot;q\&quot; includes \&quot;tags&#x3D;*\&quot; to list only tagged artifacts, \&quot;tags&#x3D;nil\&quot; to list only untagged artifacts, \&quot;tags&#x3D;~v\&quot; to list artifacts whose tag fuzzy matches \&quot;v\&quot;, \&quot;tags&#x3D;v\&quot; to list artifact whose tag exactly matches \&quot;v\&quot;, \&quot;labels&#x3D;(id1, id2)\&quot; to list artifacts that both labels with id1 and id2 are added to
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param withTag Specify whether the tags are included inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are included inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is included inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @return ApiResponse&lt;List&lt;Artifact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Artifact>> listArtifactsWithHttpInfo(String projectName, String repositoryName, String xRequestId, String q, String sort, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus) throws ApiException {
        com.squareup.okhttp.Call call = listArtifactsValidateBeforeCall(projectName, repositoryName, xRequestId, q, sort, page, pageSize, xAcceptVulnerabilities, withTag, withLabel, withScanOverview, withSignature, withImmutableStatus, null, null);
        Type localVarReturnType = new TypeToken<List<Artifact>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List artifacts (asynchronously)
     * List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \&quot;q\&quot; includes \&quot;tags&#x3D;*\&quot; to list only tagged artifacts, \&quot;tags&#x3D;nil\&quot; to list only untagged artifacts, \&quot;tags&#x3D;~v\&quot; to list artifacts whose tag fuzzy matches \&quot;v\&quot;, \&quot;tags&#x3D;v\&quot; to list artifact whose tag exactly matches \&quot;v\&quot;, \&quot;labels&#x3D;(id1, id2)\&quot; to list artifacts that both labels with id1 and id2 are added to
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports &#39;application/vnd.scanner.adapter.vuln.report.harbor+json; version&#x3D;1.0&#39; and &#39;application/vnd.security.vulnerability.report; version&#x3D;1.1&#39; (optional, default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param withTag Specify whether the tags are included inside the returning artifacts (optional, default to true)
     * @param withLabel Specify whether the labels are included inside the returning artifacts (optional, default to false)
     * @param withScanOverview Specify whether the scan overview is included inside the returning artifacts (optional, default to false)
     * @param withSignature Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \&quot;with_tag&#x3D;true\&quot; (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listArtifactsAsync(String projectName, String repositoryName, String xRequestId, String q, String sort, Long page, Long pageSize, String xAcceptVulnerabilities, Boolean withTag, Boolean withLabel, Boolean withScanOverview, Boolean withSignature, Boolean withImmutableStatus, final ApiCallback<List<Artifact>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listArtifactsValidateBeforeCall(projectName, repositoryName, xRequestId, q, sort, page, pageSize, xAcceptVulnerabilities, withTag, withLabel, withScanOverview, withSignature, withImmutableStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Artifact>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTags
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withSignature Specify whether the signature is included inside the returning tags (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the returning tags (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTagsCall(String projectName, String repositoryName, String reference, String xRequestId, String q, String sort, Long page, Long pageSize, Boolean withSignature, Boolean withImmutableStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (withSignature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_signature", withSignature));
        if (withImmutableStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_immutable_status", withImmutableStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTagsValidateBeforeCall(String projectName, String repositoryName, String reference, String xRequestId, String q, String sort, Long page, Long pageSize, Boolean withSignature, Boolean withImmutableStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling listTags(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling listTags(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling listTags(Async)");
        }
        

        com.squareup.okhttp.Call call = listTagsCall(projectName, repositoryName, reference, xRequestId, q, sort, page, pageSize, withSignature, withImmutableStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List tags
     * List tags of the specific artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withSignature Specify whether the signature is included inside the returning tags (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the returning tags (optional, default to false)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Tag> listTags(String projectName, String repositoryName, String reference, String xRequestId, String q, String sort, Long page, Long pageSize, Boolean withSignature, Boolean withImmutableStatus) throws ApiException {
        ApiResponse<List<Tag>> resp = listTagsWithHttpInfo(projectName, repositoryName, reference, xRequestId, q, sort, page, pageSize, withSignature, withImmutableStatus);
        return resp.getData();
    }

    /**
     * List tags
     * List tags of the specific artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withSignature Specify whether the signature is included inside the returning tags (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the returning tags (optional, default to false)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Tag>> listTagsWithHttpInfo(String projectName, String repositoryName, String reference, String xRequestId, String q, String sort, Long page, Long pageSize, Boolean withSignature, Boolean withImmutableStatus) throws ApiException {
        com.squareup.okhttp.Call call = listTagsValidateBeforeCall(projectName, repositoryName, reference, xRequestId, q, sort, page, pageSize, withSignature, withImmutableStatus, null, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List tags (asynchronously)
     * List tags of the specific artifact
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param withSignature Specify whether the signature is included inside the returning tags (optional, default to false)
     * @param withImmutableStatus Specify whether the immutable status is included inside the returning tags (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTagsAsync(String projectName, String repositoryName, String reference, String xRequestId, String q, String sort, Long page, Long pageSize, Boolean withSignature, Boolean withImmutableStatus, final ApiCallback<List<Tag>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTagsValidateBeforeCall(projectName, repositoryName, reference, xRequestId, q, sort, page, pageSize, withSignature, withImmutableStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeLabel
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param labelId The ID of the label that removed from the artifact. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeLabelCall(String projectName, String repositoryName, String reference, Long labelId, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "repository_name" + "\\}", apiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()))
            .replaceAll("\\{" + "label_id" + "\\}", apiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeLabelValidateBeforeCall(String projectName, String repositoryName, String reference, Long labelId, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling removeLabel(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling removeLabel(Async)");
        }
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling removeLabel(Async)");
        }
        
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling removeLabel(Async)");
        }
        

        com.squareup.okhttp.Call call = removeLabelCall(projectName, repositoryName, reference, labelId, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove label from artifact
     * Remove the label from the specified artiact.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param labelId The ID of the label that removed from the artifact. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeLabel(String projectName, String repositoryName, String reference, Long labelId, String xRequestId) throws ApiException {
        removeLabelWithHttpInfo(projectName, repositoryName, reference, labelId, xRequestId);
    }

    /**
     * Remove label from artifact
     * Remove the label from the specified artiact.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param labelId The ID of the label that removed from the artifact. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeLabelWithHttpInfo(String projectName, String repositoryName, String reference, Long labelId, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = removeLabelValidateBeforeCall(projectName, repositoryName, reference, labelId, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove label from artifact (asynchronously)
     * Remove the label from the specified artiact.
     * @param projectName The name of the project (required)
     * @param repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -&gt; a%252Fb (required)
     * @param reference The reference of the artifact, can be digest or tag (required)
     * @param labelId The ID of the label that removed from the artifact. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeLabelAsync(String projectName, String repositoryName, String reference, Long labelId, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeLabelValidateBeforeCall(projectName, repositoryName, reference, labelId, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
