/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ca.vanzyl.harbor.client.okhttp.api;

import ca.vanzyl.harbor.client.okhttp.invoker.ApiCallback;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiClient;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiException;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiResponse;
import ca.vanzyl.harbor.client.okhttp.invoker.Configuration;
import ca.vanzyl.harbor.client.okhttp.invoker.Pair;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressRequestBody;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ca.vanzyl.harbor.client.okhttp.model.Errors;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectMetadataApi {
    private ApiClient apiClient;

    public ProjectMetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectMetadataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addProjectMetadatas
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param metadata  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addProjectMetadatasCall(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Object metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/metadatas/"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addProjectMetadatasValidateBeforeCall(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Object metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling addProjectMetadatas(Async)");
        }
        

        com.squareup.okhttp.Call call = addProjectMetadatasCall(projectNameOrId, xRequestId, xIsResourceName, metadata, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add metadata for the specific project
     * Add metadata for the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param metadata  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addProjectMetadatas(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Object metadata) throws ApiException {
        addProjectMetadatasWithHttpInfo(projectNameOrId, xRequestId, xIsResourceName, metadata);
    }

    /**
     * Add metadata for the specific project
     * Add metadata for the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param metadata  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addProjectMetadatasWithHttpInfo(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Object metadata) throws ApiException {
        com.squareup.okhttp.Call call = addProjectMetadatasValidateBeforeCall(projectNameOrId, xRequestId, xIsResourceName, metadata, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add metadata for the specific project (asynchronously)
     * Add metadata for the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param metadata  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addProjectMetadatasAsync(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Object metadata, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addProjectMetadatasValidateBeforeCall(projectNameOrId, xRequestId, xIsResourceName, metadata, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProjectMetadata
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProjectMetadataCall(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/metadatas/{meta_name}"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()))
            .replaceAll("\\{" + "meta_name" + "\\}", apiClient.escapeString(metaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProjectMetadataValidateBeforeCall(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling deleteProjectMetadata(Async)");
        }
        
        // verify the required parameter 'metaName' is set
        if (metaName == null) {
            throw new ApiException("Missing the required parameter 'metaName' when calling deleteProjectMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProjectMetadataCall(projectNameOrId, metaName, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the specific metadata for the specific project
     * Delete the specific metadata for the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProjectMetadata(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName) throws ApiException {
        deleteProjectMetadataWithHttpInfo(projectNameOrId, metaName, xRequestId, xIsResourceName);
    }

    /**
     * Delete the specific metadata for the specific project
     * Delete the specific metadata for the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProjectMetadataWithHttpInfo(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName) throws ApiException {
        com.squareup.okhttp.Call call = deleteProjectMetadataValidateBeforeCall(projectNameOrId, metaName, xRequestId, xIsResourceName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the specific metadata for the specific project (asynchronously)
     * Delete the specific metadata for the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProjectMetadataAsync(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProjectMetadataValidateBeforeCall(projectNameOrId, metaName, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getProjectMetadata
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectMetadataCall(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/metadatas/{meta_name}"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()))
            .replaceAll("\\{" + "meta_name" + "\\}", apiClient.escapeString(metaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectMetadataValidateBeforeCall(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling getProjectMetadata(Async)");
        }
        
        // verify the required parameter 'metaName' is set
        if (metaName == null) {
            throw new ApiException("Missing the required parameter 'metaName' when calling getProjectMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectMetadataCall(projectNameOrId, metaName, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the specific metadata of the specific project
     * Get the specific metadata of the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, String> getProjectMetadata(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName) throws ApiException {
        ApiResponse<Map<String, String>> resp = getProjectMetadataWithHttpInfo(projectNameOrId, metaName, xRequestId, xIsResourceName);
        return resp.getData();
    }

    /**
     * Get the specific metadata of the specific project
     * Get the specific metadata of the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, String>> getProjectMetadataWithHttpInfo(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName) throws ApiException {
        com.squareup.okhttp.Call call = getProjectMetadataValidateBeforeCall(projectNameOrId, metaName, xRequestId, xIsResourceName, null, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the specific metadata of the specific project (asynchronously)
     * Get the specific metadata of the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectMetadataAsync(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, final ApiCallback<Map<String, String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectMetadataValidateBeforeCall(projectNameOrId, metaName, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listProjectMetadatas
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProjectMetadatasCall(String projectNameOrId, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/metadatas/"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProjectMetadatasValidateBeforeCall(String projectNameOrId, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling listProjectMetadatas(Async)");
        }
        

        com.squareup.okhttp.Call call = listProjectMetadatasCall(projectNameOrId, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the metadata of the specific project
     * Get the metadata of the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, String> listProjectMetadatas(String projectNameOrId, String xRequestId, Boolean xIsResourceName) throws ApiException {
        ApiResponse<Map<String, String>> resp = listProjectMetadatasWithHttpInfo(projectNameOrId, xRequestId, xIsResourceName);
        return resp.getData();
    }

    /**
     * Get the metadata of the specific project
     * Get the metadata of the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, String>> listProjectMetadatasWithHttpInfo(String projectNameOrId, String xRequestId, Boolean xIsResourceName) throws ApiException {
        com.squareup.okhttp.Call call = listProjectMetadatasValidateBeforeCall(projectNameOrId, xRequestId, xIsResourceName, null, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the metadata of the specific project (asynchronously)
     * Get the metadata of the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProjectMetadatasAsync(String projectNameOrId, String xRequestId, Boolean xIsResourceName, final ApiCallback<Map<String, String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProjectMetadatasValidateBeforeCall(projectNameOrId, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateProjectMetadata
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param metadata  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProjectMetadataCall(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, Object metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/metadatas/{meta_name}"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()))
            .replaceAll("\\{" + "meta_name" + "\\}", apiClient.escapeString(metaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProjectMetadataValidateBeforeCall(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, Object metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling updateProjectMetadata(Async)");
        }
        
        // verify the required parameter 'metaName' is set
        if (metaName == null) {
            throw new ApiException("Missing the required parameter 'metaName' when calling updateProjectMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProjectMetadataCall(projectNameOrId, metaName, xRequestId, xIsResourceName, metadata, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the specific metadata for the specific project
     * Update the specific metadata for the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param metadata  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateProjectMetadata(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, Object metadata) throws ApiException {
        updateProjectMetadataWithHttpInfo(projectNameOrId, metaName, xRequestId, xIsResourceName, metadata);
    }

    /**
     * Update the specific metadata for the specific project
     * Update the specific metadata for the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param metadata  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateProjectMetadataWithHttpInfo(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, Object metadata) throws ApiException {
        com.squareup.okhttp.Call call = updateProjectMetadataValidateBeforeCall(projectNameOrId, metaName, xRequestId, xIsResourceName, metadata, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the specific metadata for the specific project (asynchronously)
     * Update the specific metadata for the specific project
     * @param projectNameOrId The name or id of the project (required)
     * @param metaName The name of metadata. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param metadata  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProjectMetadataAsync(String projectNameOrId, String metaName, String xRequestId, Boolean xIsResourceName, Object metadata, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProjectMetadataValidateBeforeCall(projectNameOrId, metaName, xRequestId, xIsResourceName, metadata, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
