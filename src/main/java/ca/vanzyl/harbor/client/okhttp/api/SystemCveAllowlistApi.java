/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ca.vanzyl.harbor.client.okhttp.api;

import ca.vanzyl.harbor.client.okhttp.invoker.ApiCallback;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiClient;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiException;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiResponse;
import ca.vanzyl.harbor.client.okhttp.invoker.Configuration;
import ca.vanzyl.harbor.client.okhttp.invoker.Pair;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressRequestBody;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ca.vanzyl.harbor.client.okhttp.model.CVEAllowlist;
import ca.vanzyl.harbor.client.okhttp.model.Errors;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SystemCveAllowlistApi {
    private ApiClient apiClient;

    public SystemCveAllowlistApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemCveAllowlistApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getSystemCVEAllowlist
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSystemCVEAllowlistCall(String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/CVEAllowlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSystemCVEAllowlistValidateBeforeCall(String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSystemCVEAllowlistCall(xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the system level allowlist of CVE.
     * Get the system level allowlist of CVE.  This API can be called by all authenticated users.
     * @param xRequestId An unique ID for the request (optional)
     * @return CVEAllowlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CVEAllowlist getSystemCVEAllowlist(String xRequestId) throws ApiException {
        ApiResponse<CVEAllowlist> resp = getSystemCVEAllowlistWithHttpInfo(xRequestId);
        return resp.getData();
    }

    /**
     * Get the system level allowlist of CVE.
     * Get the system level allowlist of CVE.  This API can be called by all authenticated users.
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;CVEAllowlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CVEAllowlist> getSystemCVEAllowlistWithHttpInfo(String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = getSystemCVEAllowlistValidateBeforeCall(xRequestId, null, null);
        Type localVarReturnType = new TypeToken<CVEAllowlist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the system level allowlist of CVE. (asynchronously)
     * Get the system level allowlist of CVE.  This API can be called by all authenticated users.
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSystemCVEAllowlistAsync(String xRequestId, final ApiCallback<CVEAllowlist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSystemCVEAllowlistValidateBeforeCall(xRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CVEAllowlist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSystemCVEAllowlist
     * @param xRequestId An unique ID for the request (optional)
     * @param allowlist The allowlist with new content (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSystemCVEAllowlistCall(String xRequestId, CVEAllowlist allowlist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = allowlist;

        // create path and map variables
        String localVarPath = "/system/CVEAllowlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSystemCVEAllowlistValidateBeforeCall(String xRequestId, CVEAllowlist allowlist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = putSystemCVEAllowlistCall(xRequestId, allowlist, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the system level allowlist of CVE.
     * This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
     * @param xRequestId An unique ID for the request (optional)
     * @param allowlist The allowlist with new content (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putSystemCVEAllowlist(String xRequestId, CVEAllowlist allowlist) throws ApiException {
        putSystemCVEAllowlistWithHttpInfo(xRequestId, allowlist);
    }

    /**
     * Update the system level allowlist of CVE.
     * This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
     * @param xRequestId An unique ID for the request (optional)
     * @param allowlist The allowlist with new content (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putSystemCVEAllowlistWithHttpInfo(String xRequestId, CVEAllowlist allowlist) throws ApiException {
        com.squareup.okhttp.Call call = putSystemCVEAllowlistValidateBeforeCall(xRequestId, allowlist, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the system level allowlist of CVE. (asynchronously)
     * This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
     * @param xRequestId An unique ID for the request (optional)
     * @param allowlist The allowlist with new content (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSystemCVEAllowlistAsync(String xRequestId, CVEAllowlist allowlist, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSystemCVEAllowlistValidateBeforeCall(xRequestId, allowlist, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
