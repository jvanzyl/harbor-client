/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ca.vanzyl.harbor.client.okhttp.api;

import ca.vanzyl.harbor.client.okhttp.invoker.ApiCallback;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiClient;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiException;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiResponse;
import ca.vanzyl.harbor.client.okhttp.invoker.Configuration;
import ca.vanzyl.harbor.client.okhttp.invoker.Pair;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressRequestBody;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ca.vanzyl.harbor.client.okhttp.model.Errors;
import ca.vanzyl.harbor.client.okhttp.model.LdapConf;
import ca.vanzyl.harbor.client.okhttp.model.LdapFailedImportUser;
import ca.vanzyl.harbor.client.okhttp.model.LdapImportUsers;
import ca.vanzyl.harbor.client.okhttp.model.LdapPingResult;
import ca.vanzyl.harbor.client.okhttp.model.LdapUser;
import ca.vanzyl.harbor.client.okhttp.model.UserGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LdapApi {
    private ApiClient apiClient;

    public LdapApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LdapApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for importLdapUser
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importLdapUserCall(LdapImportUsers uidList, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = uidList;

        // create path and map variables
        String localVarPath = "/ldap/users/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importLdapUserValidateBeforeCall(LdapImportUsers uidList, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uidList' is set
        if (uidList == null) {
            throw new ApiException("Missing the required parameter 'uidList' when calling importLdapUser(Async)");
        }
        

        com.squareup.okhttp.Call call = importLdapUserCall(uidList, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import selected available ldap users.
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importLdapUser(LdapImportUsers uidList, String xRequestId) throws ApiException {
        importLdapUserWithHttpInfo(uidList, xRequestId);
    }

    /**
     * Import selected available ldap users.
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importLdapUserWithHttpInfo(LdapImportUsers uidList, String xRequestId) throws ApiException {
        com.squareup.okhttp.Call call = importLdapUserValidateBeforeCall(uidList, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Import selected available ldap users. (asynchronously)
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importLdapUserAsync(LdapImportUsers uidList, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importLdapUserValidateBeforeCall(uidList, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for pingLdap
     * @param xRequestId An unique ID for the request (optional)
     * @param ldapconf ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pingLdapCall(String xRequestId, LdapConf ldapconf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ldapconf;

        // create path and map variables
        String localVarPath = "/ldap/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pingLdapValidateBeforeCall(String xRequestId, LdapConf ldapconf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = pingLdapCall(xRequestId, ldapconf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Ping available ldap service.
     * This endpoint ping the available ldap service for test related configuration parameters. 
     * @param xRequestId An unique ID for the request (optional)
     * @param ldapconf ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system. (optional)
     * @return LdapPingResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LdapPingResult pingLdap(String xRequestId, LdapConf ldapconf) throws ApiException {
        ApiResponse<LdapPingResult> resp = pingLdapWithHttpInfo(xRequestId, ldapconf);
        return resp.getData();
    }

    /**
     * Ping available ldap service.
     * This endpoint ping the available ldap service for test related configuration parameters. 
     * @param xRequestId An unique ID for the request (optional)
     * @param ldapconf ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system. (optional)
     * @return ApiResponse&lt;LdapPingResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LdapPingResult> pingLdapWithHttpInfo(String xRequestId, LdapConf ldapconf) throws ApiException {
        com.squareup.okhttp.Call call = pingLdapValidateBeforeCall(xRequestId, ldapconf, null, null);
        Type localVarReturnType = new TypeToken<LdapPingResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Ping available ldap service. (asynchronously)
     * This endpoint ping the available ldap service for test related configuration parameters. 
     * @param xRequestId An unique ID for the request (optional)
     * @param ldapconf ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pingLdapAsync(String xRequestId, LdapConf ldapconf, final ApiCallback<LdapPingResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pingLdapValidateBeforeCall(xRequestId, ldapconf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LdapPingResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchLdapGroup
     * @param xRequestId An unique ID for the request (optional)
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchLdapGroupCall(String xRequestId, String groupname, String groupdn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ldap/groups/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupname != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupname", groupname));
        if (groupdn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupdn", groupdn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchLdapGroupValidateBeforeCall(String xRequestId, String groupname, String groupdn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchLdapGroupCall(xRequestId, groupname, groupdn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search available ldap groups.
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
     * @param xRequestId An unique ID for the request (optional)
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @return List&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserGroup> searchLdapGroup(String xRequestId, String groupname, String groupdn) throws ApiException {
        ApiResponse<List<UserGroup>> resp = searchLdapGroupWithHttpInfo(xRequestId, groupname, groupdn);
        return resp.getData();
    }

    /**
     * Search available ldap groups.
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
     * @param xRequestId An unique ID for the request (optional)
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @return ApiResponse&lt;List&lt;UserGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserGroup>> searchLdapGroupWithHttpInfo(String xRequestId, String groupname, String groupdn) throws ApiException {
        com.squareup.okhttp.Call call = searchLdapGroupValidateBeforeCall(xRequestId, groupname, groupdn, null, null);
        Type localVarReturnType = new TypeToken<List<UserGroup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search available ldap groups. (asynchronously)
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
     * @param xRequestId An unique ID for the request (optional)
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchLdapGroupAsync(String xRequestId, String groupname, String groupdn, final ApiCallback<List<UserGroup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchLdapGroupValidateBeforeCall(xRequestId, groupname, groupdn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserGroup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchLdapUser
     * @param xRequestId An unique ID for the request (optional)
     * @param username Registered user ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchLdapUserCall(String xRequestId, String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ldap/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchLdapUserValidateBeforeCall(String xRequestId, String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchLdapUserCall(xRequestId, username, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search available ldap users.
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
     * @param xRequestId An unique ID for the request (optional)
     * @param username Registered user ID (optional)
     * @return List&lt;LdapUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LdapUser> searchLdapUser(String xRequestId, String username) throws ApiException {
        ApiResponse<List<LdapUser>> resp = searchLdapUserWithHttpInfo(xRequestId, username);
        return resp.getData();
    }

    /**
     * Search available ldap users.
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
     * @param xRequestId An unique ID for the request (optional)
     * @param username Registered user ID (optional)
     * @return ApiResponse&lt;List&lt;LdapUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LdapUser>> searchLdapUserWithHttpInfo(String xRequestId, String username) throws ApiException {
        com.squareup.okhttp.Call call = searchLdapUserValidateBeforeCall(xRequestId, username, null, null);
        Type localVarReturnType = new TypeToken<List<LdapUser>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search available ldap users. (asynchronously)
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
     * @param xRequestId An unique ID for the request (optional)
     * @param username Registered user ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchLdapUserAsync(String xRequestId, String username, final ApiCallback<List<LdapUser>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchLdapUserValidateBeforeCall(xRequestId, username, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LdapUser>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
