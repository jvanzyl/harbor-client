/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ca.vanzyl.harbor.client.okhttp.api;

import ca.vanzyl.harbor.client.okhttp.invoker.ApiCallback;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiClient;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiException;
import ca.vanzyl.harbor.client.okhttp.invoker.ApiResponse;
import ca.vanzyl.harbor.client.okhttp.invoker.Configuration;
import ca.vanzyl.harbor.client.okhttp.invoker.Pair;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressRequestBody;
import ca.vanzyl.harbor.client.okhttp.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ca.vanzyl.harbor.client.okhttp.model.Errors;
import ca.vanzyl.harbor.client.okhttp.model.Robot;
import ca.vanzyl.harbor.client.okhttp.model.RobotCreateV1;
import ca.vanzyl.harbor.client.okhttp.model.RobotCreated;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Robotv1Api {
    private ApiClient apiClient;

    public Robotv1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Robotv1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRobotV1
     * @param projectNameOrId The name or id of the project (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRobotV1Call(String projectNameOrId, RobotCreateV1 robot, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = robot;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/robots"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRobotV1ValidateBeforeCall(String projectNameOrId, RobotCreateV1 robot, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling createRobotV1(Async)");
        }
        
        // verify the required parameter 'robot' is set
        if (robot == null) {
            throw new ApiException("Missing the required parameter 'robot' when calling createRobotV1(Async)");
        }
        

        com.squareup.okhttp.Call call = createRobotV1Call(projectNameOrId, robot, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a robot account
     * Create a robot account
     * @param projectNameOrId The name or id of the project (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return RobotCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RobotCreated createRobotV1(String projectNameOrId, RobotCreateV1 robot, String xRequestId, Boolean xIsResourceName) throws ApiException {
        ApiResponse<RobotCreated> resp = createRobotV1WithHttpInfo(projectNameOrId, robot, xRequestId, xIsResourceName);
        return resp.getData();
    }

    /**
     * Create a robot account
     * Create a robot account
     * @param projectNameOrId The name or id of the project (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;RobotCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RobotCreated> createRobotV1WithHttpInfo(String projectNameOrId, RobotCreateV1 robot, String xRequestId, Boolean xIsResourceName) throws ApiException {
        com.squareup.okhttp.Call call = createRobotV1ValidateBeforeCall(projectNameOrId, robot, xRequestId, xIsResourceName, null, null);
        Type localVarReturnType = new TypeToken<RobotCreated>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a robot account (asynchronously)
     * Create a robot account
     * @param projectNameOrId The name or id of the project (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRobotV1Async(String projectNameOrId, RobotCreateV1 robot, String xRequestId, Boolean xIsResourceName, final ApiCallback<RobotCreated> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRobotV1ValidateBeforeCall(projectNameOrId, robot, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RobotCreated>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRobotV1
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRobotV1Call(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/robots/{robot_id}"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()))
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRobotV1ValidateBeforeCall(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling deleteRobotV1(Async)");
        }
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling deleteRobotV1(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRobotV1Call(projectNameOrId, robotId, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a robot account
     * This endpoint deletes specific robot account information by robot ID.
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRobotV1(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName) throws ApiException {
        deleteRobotV1WithHttpInfo(projectNameOrId, robotId, xRequestId, xIsResourceName);
    }

    /**
     * Delete a robot account
     * This endpoint deletes specific robot account information by robot ID.
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRobotV1WithHttpInfo(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName) throws ApiException {
        com.squareup.okhttp.Call call = deleteRobotV1ValidateBeforeCall(projectNameOrId, robotId, xRequestId, xIsResourceName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a robot account (asynchronously)
     * This endpoint deletes specific robot account information by robot ID.
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRobotV1Async(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRobotV1ValidateBeforeCall(projectNameOrId, robotId, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRobotByIDV1
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRobotByIDV1Call(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/robots/{robot_id}"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()))
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRobotByIDV1ValidateBeforeCall(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling getRobotByIDV1(Async)");
        }
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling getRobotByIDV1(Async)");
        }
        

        com.squareup.okhttp.Call call = getRobotByIDV1Call(projectNameOrId, robotId, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a robot account
     * This endpoint returns specific robot account information by robot ID.
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot getRobotByIDV1(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName) throws ApiException {
        ApiResponse<Robot> resp = getRobotByIDV1WithHttpInfo(projectNameOrId, robotId, xRequestId, xIsResourceName);
        return resp.getData();
    }

    /**
     * Get a robot account
     * This endpoint returns specific robot account information by robot ID.
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> getRobotByIDV1WithHttpInfo(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName) throws ApiException {
        com.squareup.okhttp.Call call = getRobotByIDV1ValidateBeforeCall(projectNameOrId, robotId, xRequestId, xIsResourceName, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a robot account (asynchronously)
     * This endpoint returns specific robot account information by robot ID.
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRobotByIDV1Async(String projectNameOrId, Integer robotId, String xRequestId, Boolean xIsResourceName, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRobotByIDV1ValidateBeforeCall(projectNameOrId, robotId, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listRobotV1
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listRobotV1Call(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/robots"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listRobotV1ValidateBeforeCall(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling listRobotV1(Async)");
        }
        

        com.squareup.okhttp.Call call = listRobotV1Call(projectNameOrId, xRequestId, xIsResourceName, page, pageSize, q, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all robot accounts of specified project
     * Get all robot accounts of specified project
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @return List&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Robot> listRobotV1(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort) throws ApiException {
        ApiResponse<List<Robot>> resp = listRobotV1WithHttpInfo(projectNameOrId, xRequestId, xIsResourceName, page, pageSize, q, sort);
        return resp.getData();
    }

    /**
     * Get all robot accounts of specified project
     * Get all robot accounts of specified project
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @return ApiResponse&lt;List&lt;Robot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Robot>> listRobotV1WithHttpInfo(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listRobotV1ValidateBeforeCall(projectNameOrId, xRequestId, xIsResourceName, page, pageSize, q, sort, null, null);
        Type localVarReturnType = new TypeToken<List<Robot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all robot accounts of specified project (asynchronously)
     * Get all robot accounts of specified project
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listRobotV1Async(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort, final ApiCallback<List<Robot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listRobotV1ValidateBeforeCall(projectNameOrId, xRequestId, xIsResourceName, page, pageSize, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Robot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRobotV1
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRobotV1Call(String projectNameOrId, Integer robotId, Robot robot, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = robot;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/robots/{robot_id}"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()))
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRobotV1ValidateBeforeCall(String projectNameOrId, Integer robotId, Robot robot, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling updateRobotV1(Async)");
        }
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling updateRobotV1(Async)");
        }
        
        // verify the required parameter 'robot' is set
        if (robot == null) {
            throw new ApiException("Missing the required parameter 'robot' when calling updateRobotV1(Async)");
        }
        

        com.squareup.okhttp.Call call = updateRobotV1Call(projectNameOrId, robotId, robot, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update status of robot account.
     * Used to disable/enable a specified robot account.
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRobotV1(String projectNameOrId, Integer robotId, Robot robot, String xRequestId, Boolean xIsResourceName) throws ApiException {
        updateRobotV1WithHttpInfo(projectNameOrId, robotId, robot, xRequestId, xIsResourceName);
    }

    /**
     * Update status of robot account.
     * Used to disable/enable a specified robot account.
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRobotV1WithHttpInfo(String projectNameOrId, Integer robotId, Robot robot, String xRequestId, Boolean xIsResourceName) throws ApiException {
        com.squareup.okhttp.Call call = updateRobotV1ValidateBeforeCall(projectNameOrId, robotId, robot, xRequestId, xIsResourceName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update status of robot account. (asynchronously)
     * Used to disable/enable a specified robot account.
     * @param projectNameOrId The name or id of the project (required)
     * @param robotId Robot ID (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRobotV1Async(String projectNameOrId, Integer robotId, Robot robot, String xRequestId, Boolean xIsResourceName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRobotV1ValidateBeforeCall(projectNameOrId, robotId, robot, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
